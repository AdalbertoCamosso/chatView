
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  telefone      String?
  Funcionario Funcionario[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cliente {
  id            Int        @id @default(autoincrement())
  nome          String
  email         String     @unique
  telefone      String?
  endereco      String?
  Fatura        Fatura[]
  compras       Compra[]
}

model Preco {
  id            Int        @id @default(autoincrement())
  preco          Float
  produto Produto[]
}

model Categoria {
  id            Int        @id @default(autoincrement())
  nome          String
  produto Produto[]
}
model Stoque {
  id            Int        @id @default(autoincrement())
  nome          String
  produto Produto[]
}

model Produto {
  id            Int        @id @default(autoincrement())
  nome          String
  descricao     String?
  precoId         Int
  estoqueId       Int
  categoriaId     Int
  fornecedores  FornecedorProduto[]
  compras       CompraProduto[]
  FaturaItem    FaturaItem[]
  Preco    Preco @relation(fields: [precoId], references: [id])
  estoque    Stoque @relation(fields: [estoqueId], references: [id])
  categoria    Categoria @relation(fields: [categoriaId], references: [id])


}

model Funcionario {
  id            Int        @id @default(autoincrement())
  cargo         String
  salario       Float
  userId        String
  endereco      String?
  user    User @relation(fields: [userId], references: [id])
  compra        Compra[]
}

model Fornecedor {
  id            Int        @id @default(autoincrement())
  nome          String
  contato       String?
  endereco      String?
  produtos      FornecedorProduto[]
}

model FornecedorProduto {
  id            Int        @id @default(autoincrement())
  produtoId     Int
  fornecedorId  Int
  preco         Float
  produto       Produto    @relation(fields: [produtoId], references: [id])
  fornecedor    Fornecedor @relation(fields: [fornecedorId], references: [id])
}

model Compra {
  id            Int        @id @default(autoincrement())
  clienteId     Int
  funcionarioId Int
  data          DateTime   @default(now())
  total         Float
  cliente       Cliente    @relation(fields: [clienteId], references: [id])
  funcionario   Funcionario @relation(fields: [funcionarioId], references: [id])
  produtos      CompraProduto[]
  Fatura        Fatura[]
  CompraDesconto    CompraDesconto[]
}

model CompraProduto {
  id            Int        @id @default(autoincrement())
  compraId      Int
  produtoId     Int
  quantidade    Int
  precoUnitario Float
  compra        Compra     @relation(fields: [compraId], references: [id])

  produto       Produto    @relation(fields: [produtoId], references: [id])
}

//faturacao

model Fatura {
  id            Int        @id @default(autoincrement())
  clienteId     Int
  compraId      Int
  dataEmissao   DateTime   @default(now())
  total         Float
  cliente       Cliente    @relation(fields: [clienteId], references: [id])
  compra        Compra     @relation(fields: [compraId], references: [id])
  itens         FaturaItem[]
}

model FaturaItem {
  id            Int        @id @default(autoincrement())
  faturaId      Int
  produtoId     Int
  quantidade    Int
  precoUnitario Float
  fatura        Fatura     @relation(fields: [faturaId], references: [id])
  produto       Produto    @relation(fields: [produtoId], references: [id])
}


//descontos 



model Desconto {
  id            Int        @id @default(autoincrement())
  nome          String
  valor         Float
  tipo          TipoDesconto
  descricao     String?
  compras       CompraDesconto[]
}

model CompraDesconto {
  id            Int        @id @default(autoincrement())
  compraId      Int
  descontoId    Int
  valorAplicado Float
  compra        Compra     @relation(fields: [compraId], references: [id])
  desconto      Desconto   @relation(fields: [descontoId], references: [id])
}

enum TipoDesconto {
  PERCENTUAL
  FIXO
}

